<Work list>
** 일단 기본 원칙은 해보고 모르는게 있으면 조금 해보고 잘 안되면 일단 keep해둘것
질문 목록에 추가해두고 넘어갈것
중요한 것은 최대한 많은 경험을 해보는 것!

21.02.04~05
기능 추가
1. "등록" 버튼 위에 마우스 있을 시 마우스 손가락 모양으로 바뀌게끔 수정 (완료)
2. "삭제" 기능 필요 (완료)
삭제는 되는데..
num data가 삭제 되면서 게시글 리스트에 순서가 중간이 잘리게 되어있음. (아래 참조)

** 삭제 후 정렬과 연관하여
이를 index_num이라는 행을 하나 만들어서 다시 찍어줄 예정이였으나.(이렇게 하는게 아니라 하심) 
일단 ROW_NUMBER()사용해서 처리하고 그 행을 가지고 페이징 시키는 것이 가장 좋은 듯.

** 정렬 기법도..
여러가지 기법을 사용해야 하는데
  (1) 시간 오름차순,내림차순으로 처리
  ** 이와 연관하여 디버깅 해야할 부분이 여럿 있음.
    - 일단 기본적으로 내림차순으로 출력되게 만들 것. (기본updown속성:2) (v)
    - 페이지 이동할 때 정렬 모드를 따라 움직이도록 만들 것. (v) "fnList(updown)"
    - 게시글 내용 확인 후 다시 목록으로 돌아올 때도 정렬 모드를 따라 보여질 것.(v) "fnView(updown)"
    - 게시글 작성/ 수정 후 다시 목록 보여질 때 이전 정렬모드 따라 보여질 것.(v) 게시글 작성 : "fnWrite(updown)" 
      (게시글 수정은 필요 없음 그냥 수정되어서 보여지므로)

 (2) 10페이지씩 보이기, 50페이지씩 보이기, 100페이지씩 보이기 (v)
    select태그를 사용하여 선택할 수 있게 만듬 (@change 사용)
    v-model로 변수를 받아올 것. (v-model을 select 태그에 사용하면 value 값을 가져올 수 있음)
    선택 되었을 때 이벤트 명을 확인 한 후 함수 호출 (fnSelectViewMode)
    함수 호출 시 VIEW_MODE에 따라 IF문으로 서버단에서 페이징 관련 변수 설정
    페이징 변수에 맞게 SELCT 쿼리 문의 범위 설정

  + 검색 기능도 구현 필요(v)
  "키워드"를 가지고 와서 키워드가 제목에 있으면 검색가능하게끔 구현필요
  like '%키워드%'의 쿼리문을 사용하여 적용하였음.

** 페이징 기능(어려움)
+ 페이지 옮겨질 때 한개짜리 화살표 오른쪽에만 표시되고 동작원리는 화살표 두개와 다르지 않음.
왼쪽에도 표시되게 만들고, 화살표 하나만 표시될 경우 하나씩 움직이게 만들 것.
현재 문제.
- paging.page+1 값이 문자로 뒤에 1이 추가가 된다. 이게... 문자열로 갑자기 받아서 그런건지 아니면 갑자기 *10+1이 되는건지 알아봐야겠다.
::솔직히 말하면 위의 내용이 완벽하게 파악이 되진 않았는데... 일단 paging.page+1 을 ++paging.page 이런식으로 해서 해결 했다.
::나중에 여쭤봐야되겠다!
- 30개 페이지 넘어가니까 39번까지 가보면 줄이 엄청 길어짐... 이상해짐.. 10개씩 끊어서 표시되는 것도 엉망인듯.
::start_page, end_page 관련해서 올바르게 수정하니 해결 됐음.


3. 로그인,회원가입 기능 만들 것
회원 데이터베이스 따로 만들어야 함! (User_Info)
(21.02.18)
- 회원가입.
  : 이름 입력 
  : 아이디 생성, 중복 체크 (primary key)
  : 비밀번호 만듬 
  insert 쿼리로 User_Info db에 추가할 것.
  ** 여기서는 예외처리해야할 영역이 굉장히 많음.
  - 이름,아이디,비밀번호,비밀번호 확인 이 것들이 안채워졌을 경우 회원가입 안되게끔 얼럿창 띄워야 함. (v)
  - 비밀번호 확인이 제대로 되어야 회원가입 가능함. (v)
  - 중복체크가 제대로 되어야 회원가입이 가능함. (v)

(21.02.16-17)
- 로그인
  : 아이디
  : 비밀번호 입력
  하면 위에 "ooo" 님 반갑습니다. 라고 문구 표시 되게끔 만들 것.
  헤더에 이런식으로 표시해야하는데. 헤더에 어떤식으로 변수를 넘겨줄 수 있는지 모르겠음.
  일단 서버측에 axios로 보내서 다시 받는 방법까지는 생각해봤는데 어떻게 구현할 것인가...

  일단 로그인 성공하면 화면을 새로고침하는 함수 추가함. (router.go() 함수 사용)
  서버단에 LoginFlag 변수를 만들어 로그인 성공 시 LoginFlag를 true로 만들고 헤더에 이름,아이디를 전송
  헤더에서 이름을 받아 "000"님 환영합니다로 찍히게끔 수정
  
(21.02.18)
  그 후 로그아웃 버튼을 누를 시 서버단에 LoginFlag를 false로 만든 후 헤더에서 로그아웃 상태로 만들게 수정하였음.
  ** 추가로 필요한 기능
  또 로그인 하지 않으면 글 작성 못하게 막는 기능이 필요함. (v)
  - 로그인 후 등록 눌렀을 때 LoginFlag 받아서 로그인 안된 상태라면 로그인하라고 뜨게끔 만들 것.
  - 리스트로 다시 오는 경우
  (뷰->리스트), (작성->리스트), (수정->리스트) 이 모든 경우를 다 생각해줘야 함.
  - 로그인 상태도 기억해서 작성자와 로그인 유저가 같을 경우 수정,삭제가 가능하게끔 만들어줘야 함.
  로그인 후에 글 작성하면 해당 아이디로 등록되게끔 만들 것.(id를 이제 가지고 다녀야 함.)


4. 게시판 news 탭 제외하고 추가 탭을 구성할 것.
5. 카테고리 설정 기능 추가할 것.
  결국에 게시판을 만들려는 이유가 pims 관련 업무 요청을 원할하게 하기 위해서임을 기억하자.

※일반적인 게시판이라면 조회순 별로 처리할 수도 있음 (나중에 구현하는 걸로)

(21.04.26)
review 준비 추가 보완 사항
1. 요청 수락 기능이 있어야 함.
2. 에디터 수정
3. 답글 기능
4. 오름차순, 내림차순 기능 제대로 구현할 것

(21.04.30~21.05.03)
리뷰 준비
https://fyzh99.tistory.com/34 참조

0. 기본 환경 설명
  - 프레임워크:  vue js
  vue cli로 설치 
  npm i -g @vue/cli 
  > vue 프로젝트 생성
  vue create
  > 기본 파일 시스템이 생기게 됨.
  - package.json 소개
  >> "axios": "^0.21.1",  : 서버와의 통신 (서버단은 node.js를 사용하였음. db: mssql)
  >> "tiptap": "^1.32.2",    : 에디터 
  >> "vue-router": "^3.5.1", : 페이지 이동 시 사용

  - src 디렉토리 안에 기본 소스들이 생성됨
  >> asset : 이미지 파일
  >> component : 컴포넌트 파일들.. 
  >> routes :  페이지 이동과 연관된 파일 (path/url 관리)
  >> App.vue : 최상위 컴포넌트
  >> main.js : 최초 실행되는 자바스크립트

  - main.js 
  : 서버와 통신할 때 사용할 axios.
  : 라우팅 기능 router import
  : new Vue vue를 시작한 후 
  >> App.vue의 <div id=app>가 있는 템플릿을 가져와서 mount 해줌.
  
  - App.vue 
  <router-view name="header" />
  >> routes/index.js 파일로 가게 됨
  가장 위의 
  path:'/'
  ,components:{
    default:HelloWorld
    ,header:Header
  }
  components 디렉토리에
  default : HelloWorld
  header : Header.
  여기선 name을 header로 지정하였으므로 상단의
  import Header from '@/components/common/Header'; // 헤더 부분 수정할 때 사용
  부분을 참조하여 src/components/Header.vue 컴포넌트를 가져와 보여준다.
  
  참고로 그 아래 
  <div class="container"> <!--class 추가-->
  <router-view></router-view>
  </div>
  router-view에서 Defualt로 설정 되어 있는 HelloWorld.vue 컴포넌트를 가져온다.

  - Header.vue
  4번~6번 line 에서 logo 를 클릭하면 router link인 첫 화면으로 이동하게 만들어줌.

  10~13번 줄 
  v-if 로 LoginFlag를 받아서 로그인 상태이면 현재 로그인 중인 유저의 이름과 로그아웃 버튼을 보여주도록 하였다.
  * 이때 header가 모든 페이지 이동 시 현재 Login 상태인지 아닌지를 알고 있어야 함.
  
  1) LoginFlag 값 변화흐름
  data() 안의 LoginFlag 의 초깃값은 'false'
  ,mounted => fnGetHeader() 를 호출
  get 방식으로 axios를 사용하여 서버단에 보냄
  
  2) firstserver/routes/api 안의 index.js 파일에 가보면 router.get('/',dao.header); 라는 부분이 있음.
  
  3) board 안의 dao.js 파일을 보면
  const db = require('../../../config/db');
  config 폴더 안의 db.js를 열어보면
  mssql에 접속할 수 있게 pool을 만들어 연결하고
  pool 다쓰면 지워주는 식으로 동작함.

  4) 다시 dao.js 로 돌아와서 



1. 리스트 가져오기 
- "게시판 클릭" 시 리스트 가져오기.

